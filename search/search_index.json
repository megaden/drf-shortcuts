{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Summary Shortcuts for speeding up your development based on Django REST Framework (DRF). DRF shortcuts library allows you to: Expose your Django model class using a one-liner register_standard_endpoint(your_router, YourModel) . Exposed API endpoint will support search & ordering of items for suitable fields (backed up by SearchFilter & OrderingFilter filter backends) and will be nicely documented in both Browseable API & upon issuing OPTIONS requests against it. Create rest_framework.viewsets.ModelViewSet based viewset class for your Django model using a one-liner create_standard_viewset_class(YourModel) . Viewset capabilities will be similar to the one registered using register_standard_endpoint shortcut. Create JS-based clients friendly serializer class for your Django model using a one-liner create_standard_serializer_class(YourModel) . Use library classes & helper functions to tailor your own DRF shortcuts. Quick Links Requirements & Installation Examples API Reference GitHub Repo","title":"Overview"},{"location":"#summary","text":"Shortcuts for speeding up your development based on Django REST Framework (DRF). DRF shortcuts library allows you to: Expose your Django model class using a one-liner register_standard_endpoint(your_router, YourModel) . Exposed API endpoint will support search & ordering of items for suitable fields (backed up by SearchFilter & OrderingFilter filter backends) and will be nicely documented in both Browseable API & upon issuing OPTIONS requests against it. Create rest_framework.viewsets.ModelViewSet based viewset class for your Django model using a one-liner create_standard_viewset_class(YourModel) . Viewset capabilities will be similar to the one registered using register_standard_endpoint shortcut. Create JS-based clients friendly serializer class for your Django model using a one-liner create_standard_serializer_class(YourModel) . Use library classes & helper functions to tailor your own DRF shortcuts.","title":"Summary"},{"location":"#quick-links","text":"Requirements & Installation Examples API Reference GitHub Repo","title":"Quick Links"},{"location":"examples/","text":"Examples Exposing a Django model # in urls.py from rest_framework.routers import DefaultRouter from drf_shortcuts.urls import register_standard_endpoint from my_fancy_app.models import MyModel router = DefaultRouter(trailing_slash=False) register_standard_endpoint(router, MyModel) # ... more URL configuration code here ... urlpatterns = router.urls Creating a viewset class # in views.py from drf_shortcuts.views import create_standard_viewset_class from my_fancy_app.models import MyModel MyModelViewSet = create_standard_viewset_class(MyModel) Creating a serializer class # in serializers.py from drf_shortcuts.serializers import create_standard_serializer_class from my_fancy_app.models import MyModel MyModelSerializer = create_standard_serializer_class(MyModel) Customizing a view using helpers # in views.py from rest_framework.viewsets import ReadOnlyModelViewSet from drf_shortcuts.views import append_search_info_to_docstring from drf_shortcuts.serializers import create_standard_serializer_class from my_fancy_app.models import MyModel @append_search_info_to_docstring class MyModelViewSet(ReadOnlyModelViewSet): serializer_class = create_standard_serializer_class(MyModel) # ... rest of the view code ...","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#exposing-a-django-model","text":"# in urls.py from rest_framework.routers import DefaultRouter from drf_shortcuts.urls import register_standard_endpoint from my_fancy_app.models import MyModel router = DefaultRouter(trailing_slash=False) register_standard_endpoint(router, MyModel) # ... more URL configuration code here ... urlpatterns = router.urls","title":"Exposing a Django model"},{"location":"examples/#creating-a-viewset-class","text":"# in views.py from drf_shortcuts.views import create_standard_viewset_class from my_fancy_app.models import MyModel MyModelViewSet = create_standard_viewset_class(MyModel)","title":"Creating a viewset class"},{"location":"examples/#creating-a-serializer-class","text":"# in serializers.py from drf_shortcuts.serializers import create_standard_serializer_class from my_fancy_app.models import MyModel MyModelSerializer = create_standard_serializer_class(MyModel)","title":"Creating a serializer class"},{"location":"examples/#customizing-a-view-using-helpers","text":"# in views.py from rest_framework.viewsets import ReadOnlyModelViewSet from drf_shortcuts.views import append_search_info_to_docstring from drf_shortcuts.serializers import create_standard_serializer_class from my_fancy_app.models import MyModel @append_search_info_to_docstring class MyModelViewSet(ReadOnlyModelViewSet): serializer_class = create_standard_serializer_class(MyModel) # ... rest of the view code ...","title":"Customizing a view using helpers"},{"location":"setup/","text":"Requirements Python 3.6+ Django 2.0+ Django REST Framework 3.8+ Installation Install using pip: pip install drf-shortcuts","title":"Requirements & Installation"},{"location":"setup/#requirements","text":"Python 3.6+ Django 2.0+ Django REST Framework 3.8+","title":"Requirements"},{"location":"setup/#installation","text":"Install using pip: pip install drf-shortcuts","title":"Installation"},{"location":"tbc/","text":"Coming soon","title":"Coming soon"},{"location":"tbc/#coming-soon","text":"","title":"Coming soon"},{"location":"generated/drf_shortcuts-serializers/","text":"drf_shortcuts.serializers serializers module of DRF (Django REST Framework) shortcuts package. Functions: generate_detail_view_name : Generates detail view name for a viewset which DRF uses to expose it. generate_serializer_base_name : Generates base name to be used in viewset routing via DRF router further on. get_entity_pk : Gets the primary key (PK) of an entity associated with the serializer provided. get_optional_field_value : Gets the value of a model field if it exists either in serializer data or in the database. get_required_field_value : Gets the value of a model field either from serializer data or from the database. rename_serializer_field : Renames specified field of a serializer optionally updating its label. create_standard_serializer_class : Creates serializer class for the Django model specified. Classses: JsFriendlyFieldsRenamingSerializer : Renames serializer fields from snake_case into Javascript-friendly PascalCase. OptimizeUrlFieldsSerializer : Removes serializer fields producing URLs from output reducing resulting output size. UpdateEditorSerializer : Automatically updates serializer data with request.user if there is any in case of update. InsertAuthorSerializer : Automatically adds request.user to serializer data if there is any in case of creation. generate_detail_view_name generate_detail_view_name(base_name) Generates detail view name for a viewset which DRF will use to expose it via router. Detail view is used to process requests against individual entities rather than lists. DRF registers base_name + '-detail' by default as detail view name. Takes API_URL_NAMESPACE setting into account if set, i.e. if API_URL_NAMESPACE is 'foo' and base name is 'bar' then detail view full name would be 'foo:bar-detail'. The intended usage is to provide HyperlinkedRelatedFields with proper view name to resolve. Parameters: base_name str : The base name of a viewset to. Returns: the detail view name. See also: Usage of routers in DRF generate_serializer_base_name rest_framework.relations.HyperlinkedRelatedField generate_serializer_base_name generate_serializer_base_name(model_cls) Generates base name to be used when a viewset is exposed via DRF router further on. Attaching a base name to the serializer streamlines routing to detail views from related fields. By convention standard serializers created by DRF shortcuts package have DEFAULT_BASE_NAME class attribute, which captures this function result against serializer model class for further usage. Parameters: model_cls django.db.models.Model : The Model class serializer works with. Returns: the base name. See also: Usage of routers in DRF generate_detail_view_name get_entity_pk get_entity_pk(serializer) Gets the primary key (PK) of an entity associated with the serializer provided. Looks up serializer context for associated view data. Parameters: serializer rest_framework.serializers.BaseSerializer : The serializer instance to use for PK lookup. Returns: the PK of the entity if present else None. get_optional_field_value get_optional_field_value(data, field_name, pk, fetch_model) Gets the value of a model field if it exists either in serializer data or in the database. \"Optional\" means it's not an issue if the field value is missing / None. If there's no field in data, then model if fetched via function provided and looked up instead. Field can be missing in data in case of partial update (PATCH) or in case action allows that some other way. Parameters: data dict : The serializer's data to look up the field in first. field_name str : The name of the field to look up. pk object : The value of corresponding entity's PK to fetch model in case there's no field in data. fetch_model function : A function which is expected to return model instance if executed with its PK as argument. Returns: the value of the field if present else None. get_required_field_value get_required_field_value(data, field_name, pk, fetch_model) Gets the value of a model field either from serializer data or from the database. \"Required\" means it's an issue if the field value is missing / None hence function will fail in such case. If there's no field in data, then model if fetched via function provided and looked up instead. Field can be missing in data in case of partial update (PATCH) or in case action allows that some other way. Parameters: data dict : The serializer's data to look up the field in first. field_name str : The name of the field to look up. pk object : The value of corresponding entity's PK to fetch model in case there's no field in data. fetch_model function : A function which is expected to return model instance if executed with its PK as argument. Returns: the value of the field if present else None. rename_serializer_field rename_serializer_field(serializer, source_name, target_name, display_name=None) Renames specified field of a serializer optionally updating its label. Useful to make field set of a serialized representation of an entity differ from the original one. Parameters: serializer rest_framework.serializers.Serializer : The serializer instance to rename field of. source_name str : The original name of the field. target_name str : The desired name of the field. display_name str : The updated label of the field (optional). See also: DRF Serializer Field Label JsFriendlyFieldsRenamingSerializer JsFriendlyFieldsRenamingSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Renames serializer fields from snake_case into Javascript-friendly PascalCase. Looks up field names in snake_case and replaces with PascalCase names leveraging rename_serializer_field & RegExp. See also: rename_serializer_field OptimizeUrlFieldsSerializer OptimizeUrlFieldsSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Removes serializer fields producing URLs from output reducing resulting output size. By default URL fields are removed for any Renderer except BrowsableAPIRenderer. HyperlinkedIdentityField, HyperlinkedRelatedField and any explicitly added fields are stripped out. Behavior can be overridden by \"forceUrls\" query parameter (\"true\" / \"false\"). To explicitly add a field inheritors should set up _explicit_url_field_names class attribute. See also: DRF Renderers UpdateEditorSerializer UpdateEditorSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Automatically updates serializer data with request.user if there is any in case of update. The intended usage is streamline update of \"last modified by\" kind of model fields. Only PUT & PATCH methods trigger such behavior. Inheritors must either define \"editor_field_name\" or implement \"set_editor_core\" method. InsertAuthorSerializer InsertAuthorSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Automatically adds request.user to serializer data if there is any in case of creation. The intended usage is streamline update of \"created by\" kind of model fields. Only POST methods trigger such behavior. Inheritors must either define \"author_field_name\" or implement \"set_author_core\" method. create_standard_serializer_class create_standard_serializer_class(model_cls) Creates serializer class for the Django model specified. Created serializer will declare all model fields, will have \"url\" HyperlinkedIdentityField pointing at detail view for the entity and will inherit OptimizeUrlFieldsSerializer and JsFriendlyFieldsRenamingSerializer behaviors. Parameters: model_cls django.db.models.Model : The Model class serializer should work with. Returns: the standardized serializer class for the model specified.","title":"serializers module"},{"location":"generated/drf_shortcuts-urls/","text":"drf_shortcuts.urls urls module of DRF (Django REST Framework) shortcuts package. Functions: register_standard_endpoint : Exposes Django model via DRF router. See also: drf_shortcuts.views.create_standard_viewset_class register_standard_endpoint register_standard_endpoint(router, model, viewset_cls=None) Exposes API endpoints for Django model via DRF router. Parameters: router rest_framework.routers.BaseRouter : The instance of DRF router to add viewset to. model django.db.models.Model : The model class to expose. viewset_cls rest_framework.viewsets.GenericViewSet : The viewset to expose (optional). If omitted the 'standard' viewset class will be used. See also drf_shortcuts.views.create_standard_viewset_class .","title":"urls module"},{"location":"generated/drf_shortcuts-views/","text":"drf_shortcuts.views views module of DRF (Django REST Framework) shortcuts package. Functions: append_pagination_info_to_docstring : TBD. append_search_info_to_docstring : TBD. append_ordering_info_to_docstring : TBD. append_search_ordering_and_pagination_info_to_docstring : TBD. get_fields_suitable_for_ordering : TBD. get_fields_suitable_for_search : TBD. create_standard_viewset_class : TBD.","title":"views module"},{"location":"generated/drf_shortcuts/","text":"drf_shortcuts DRF (Django REST Framework) shortcuts package. Common shortcuts for speeding up your development based on Django REST Framework (DRF). Modules: serializers : Base classes & helper functions for creating serializer types. urls : Now contains only 'register_standard_endpoint' helper function for registering Model against DRF Router. views : Helper functions for creating view & viewset types.","title":"package"}]}